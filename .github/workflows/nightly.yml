name: Nightly Build

on:
  schedule:
    # Run every Sunday at 00:00 UTC
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no changes'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  Check-and-Prepare:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check-changes.outputs.should_build }}
      nightly_version: ${{ steps.version.outputs.nightly_version }}
      commit_hash: ${{ steps.version.outputs.commit_hash }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper comparison

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for changes and prepare nightly branch
        id: check-changes
        run: |
          echo "Checking for changes between main and nightly..."
          
          # First, delete any existing nightly tag to avoid conflicts
          if git ls-remote --tags origin | grep -q "refs/tags/nightly$"; then
            echo "Deleting existing remote nightly tag to avoid conflicts"
            git push origin :refs/tags/nightly
          fi
          
          # Get the latest commit hash from main
          MAIN_COMMIT=$(git rev-parse origin/main)
          echo "Latest main commit: $MAIN_COMMIT"
          
          # Check if nightly branch exists
          if git show-ref --verify --quiet refs/remotes/origin/nightly; then
            echo "Nightly branch exists"
            NIGHTLY_COMMIT=$(git rev-parse origin/nightly)
            echo "Latest nightly commit: $NIGHTLY_COMMIT"
            
            if [ "$MAIN_COMMIT" = "$NIGHTLY_COMMIT" ]; then
              echo "No changes detected between main and nightly"
              if [ "${{ github.event.inputs.force_build }}" = "true" ]; then
                echo "Force build requested, proceeding anyway"
                echo "should_build=true" >> $GITHUB_OUTPUT
              else
                echo "should_build=false" >> $GITHUB_OUTPUT
                exit 0
              fi
            else
              echo "Changes detected, nightly build needed"
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "Nightly branch does not exist, creating it"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
          
          # Create or update nightly branch to match main
          echo "Creating/updating nightly branch..."
          git checkout -B nightly origin/main
          
          # Push the branch explicitly using full ref path
          echo "Pushing nightly branch..."
          git push origin refs/heads/nightly:refs/heads/nightly --force
          
          echo "Nightly branch updated successfully"

      - name: Setup Node.js for version bump
        if: steps.check-changes.outputs.should_build == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Bump version to 0.0.0
        if: steps.check-changes.outputs.should_build == 'true'
        run: |
          echo "Bumping version to 0.0.0..."
          npm run version bump 0.0.0
          
          # Commit the version change to nightly branch
          git add .
          git commit -m "bump: version to 0.0.0 for statistics server" || echo "No changes to commit"
          
          # Push the updated nightly branch with version bump
          git push origin refs/heads/nightly:refs/heads/nightly
          
          echo "Version bumped to 0.0.0 and committed"

      - name: Generate nightly version
        id: version
        run: |
          # Get current date for nightly version
          NIGHTLY_DATE=$(date -u +"%Y%m%d")
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          # Get base version from package.json
          NIGHTLY_VERSION="${NIGHTLY_DATE}"
          
          echo "Nightly version: $NIGHTLY_VERSION"
          echo "Commit hash: $COMMIT_HASH"
          
          echo "nightly_version=$NIGHTLY_VERSION" >> $GITHUB_OUTPUT
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Create and push nightly tag
        if: steps.check-changes.outputs.should_build == 'true'
        run: |
          echo "Creating nightly tag on nightly branch"
          git checkout nightly
          
          # Delete any local nightly tag if it exists
          if git tag -l | grep -q "^nightly$"; then
            echo "Deleting existing local nightly tag"
            git tag -d nightly
          fi
          
          # Create new nightly tag
          git tag nightly
          
          # Push the tag explicitly using full ref path
          echo "Pushing nightly tag..."
          git push origin refs/tags/nightly:refs/tags/nightly
          
          echo "Nightly tag created and pushed successfully"

  Build-Nightly:
    needs: [Check-and-Prepare]
    if: needs.Check-and-Prepare.outputs.should_build == 'true'
    uses: ./.github/workflows/build.yml
    with:
      version: "nightly_${{ needs.Check-and-Prepare.outputs.nightly_version }}"
      upload_artifacts: true
    secrets:
      SJMCL_MICROSOFT_CLIENT_SECRET: ${{ secrets.SJMCL_MICROSOFT_CLIENT_SECRET }}
      SJMCL_CURSEFORGE_API_KEY: ${{ secrets.SJMCL_CURSEFORGE_API_KEY }}

  Sign-macOS-Artifacts:
    needs: [Check-and-Prepare, Build-Nightly]
    if: needs.Check-and-Prepare.outputs.should_build == 'true'
    uses: ./.github/workflows/sign-macos.yml
    with:
      version: "nightly_${{ needs.Check-and-Prepare.outputs.nightly_version }}"
    secrets:
      MACOS_CERT_P12_BASE64: ${{ secrets.MACOS_CERT_P12_BASE64 }}
      MACOS_CERT_P12_PASSWORD: ${{ secrets.MACOS_CERT_P12_PASSWORD }}
      MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
      MACOS_NOTARY_APPLE_ID: ${{ secrets.MACOS_NOTARY_APPLE_ID }}
      MACOS_NOTARY_PASSWORD: ${{ secrets.MACOS_NOTARY_PASSWORD }}
      MACOS_NOTARY_TEAM_ID: ${{ secrets.MACOS_NOTARY_TEAM_ID }}

  Create-Nightly-Release:
    needs: [Check-and-Prepare, Build-Nightly, Sign-macOS-Artifacts]
    if: needs.Check-and-Prepare.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: nightly

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Remove unsigned macOS artifacts to avoid conflicts
        run: |
          echo "Removing unsigned macOS artifacts to prevent filename conflicts..."
          # Remove unsigned macOS artifacts since we have signed versions
          rm -rf ./artifacts/SJMCL_*_macos_aarch64/
          rm -rf ./artifacts/SJMCL_*_macos_x86_64/
          echo "Unsigned macOS artifacts removed"
          
          echo "Remaining artifacts:"
          ls -la ./artifacts/*/*

      - name: Delete existing nightly release if exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if nightly release exists and delete it
          if gh release view nightly >/dev/null 2>&1; then
            echo "Deleting existing nightly release"
            gh release delete nightly --yes
          else
            echo "No existing nightly release found"
          fi

      - name: Create nightly pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NIGHTLY_VERSION: ${{ needs.Check-and-Prepare.outputs.nightly_version }}
          COMMIT_HASH: ${{ needs.Check-and-Prepare.outputs.commit_hash }}
        run: |
          # Create release notes
          cat > release_notes.md << 'EOF'
          
          > [!WARNING]
          > **This is a nightly build for developers and testers only!**
          
          Regular users should download the latest stable release instead of this nightly build.
          
          ### ⚠️ Important Notes:
          - This build may contain unstable features or bugs
          - Not recommended for production use
          - No support provided for nightly builds
          - Features may change or be removed without notice

          EOF
          
          echo "Creating nightly pre-release..."
          ls -la ./artifacts/*/*
          
          # Create the pre-release with nightly tag
          gh release create "nightly" \
            --title "SJMCL Nightly (${{ env.NIGHTLY_VERSION }})" \
            --notes-file release_notes.md \
            --prerelease \
            --target nightly \
            ./artifacts/*/*
          
          echo "Nightly release created successfully!"

      - name: Cleanup old nightly releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for old nightly releases to cleanup..."
          
          # Get all releases, filter for old nightly ones (keeping only the latest)
          # This helps prevent the releases page from getting cluttered
          gh release list --limit 50 --json tagName,createdAt,isPrerelease | \
          jq -r '.[] | select(.isPrerelease and (.tagName | startswith("nightly-"))) | .tagName' | \
          head -n +5 | \
          while read tag; do
            if [ ! -z "$tag" ] && [ "$tag" != "nightly" ]; then
              echo "Deleting old nightly release: $tag"
              gh release delete "$tag" --yes || echo "Failed to delete $tag, continuing..."
            fi
          done
          
          echo "Cleanup completed" 