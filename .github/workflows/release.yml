# Manually build and release artifacts instead of using tauri-actions
# Reasons:
# 1. Include OS name in output filenames (tauri-actions doesn't support this)
# 2. Publish portable .exe for Windows (unsupported by tauri-actions either)
name: Release

on:
    push:
        tags:
            - 'v*'
    workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Version-Check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check-tag.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Check version consistency
        run: npm run version check

      - name: Check Tag Version
        id: check-tag
        shell: bash
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $PKG_VERSION"
          
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_VERSION="${{ github.ref_name }}"
            TAG_VERSION=${TAG_VERSION#v}
            
            if [[ "$TAG_VERSION" != "$PKG_VERSION" ]]; then
              echo "❌ Git tag version ($TAG_VERSION) does not match package version ($PKG_VERSION)"
              exit 1
            fi
            echo "✅ Git tag version matches package version: $TAG_VERSION"
          fi
          
          # Set the version as output
          echo "version=$PKG_VERSION" >> $GITHUB_OUTPUT

  Build-and-Release:
    needs: [Version-Check]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: x86_64
          # macos-large just doesn't start; job fails so it's disabled currently.
          # - os: macos-latest-large
          #   target: x86_64-apple-darwin
          #   platform: macos
          #   arch: x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
            arch: aarch64
          - os: ubuntu-latest
            target: x86_64-linux-gnu
            platform: linux
            arch: x86_64

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          # Additional dependencies for RPM building
          sudo apt-get install -y rpm

      - name: Install frontend dependencies
        run: npm install

      - name: Remove Font files (MacOS)
        if: matrix.platform == 'macos'
        run: |
          rm -r public/fonts/Sinter/
          rm src/styles/fonts.css
          touch src/styles/fonts.css

      - name: Build the app
        run: npm run tauri build
        env:
          RUST_TARGET: ${{ matrix.target }}

      - name: Prepare release artifact
        shell: bash
        env:
          VERSION: ${{ needs.Version-Check.outputs.version }}
        run: |
          ARTIFACT_NAME="SJMCL_${{ env.VERSION }}_${{ matrix.platform }}_${{ matrix.arch }}"
          echo "Artifact Name: $ARTIFACT_NAME"
          if [ "${{ matrix.platform }}" = "windows" ]; then
            # For Windows, copy the portable exe
            cp "src-tauri/target/release/SJMCL.exe" "$ARTIFACT_NAME".exe
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            # For MacOS, compress the .app folder
            cd "src-tauri/target/release/bundle/macos"
            tar -cvzf "../../../../../$ARTIFACT_NAME.tar.gz" "SJMCL.app"
            cd "../../../../../"
            ls -la
          elif [ "${{ matrix.platform }}" = "linux" ]; then
                mv "src-tauri/target/release/bundle/appimage/"*.AppImage "$ARTIFACT_NAME".AppImage
                mv "src-tauri/target/release/bundle/deb/"*.deb "$ARTIFACT_NAME".deb
                mv "src-tauri/target/release/bundle/rpm/"*.rpm "$ARTIFACT_NAME".rpm
                cd "src-tauri/target/release"
                tar -cvzf "../../../$ARTIFACT_NAME.tar.gz" "SJMCL"
                cd "../../../"
          fi
          
          echo "ARTIFACT_PATH=$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: Upload artifact (Windows/exe)
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PATH }}
          path: SJMCL_*.exe
          if-no-files-found: error

      - name: Upload artifact (MacOS/app)
        if: matrix.platform == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PATH }}
          path: SJMCL_*.tar.gz
          if-no-files-found: error

      - name: Upload artifact (Linux/deb, rpm, AppImage)
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PATH }}
          path: |
            SJMCL_*.deb
            SJMCL_*.rpm
            SJMCL_*.AppImage
            SJMCL_*.tar.gz
          if-no-files-found: error

  Create-Release:
    needs: [Version-Check, Build-and-Release]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.Version-Check.outputs.version }}
        run: |
          RELEASE_TAG="${{ env.VERSION }}"

          ls -la
          
          # Create the release
          gh release create "$GITHUB_REF_NAME" \
            --title "SJMCL ${{ env.VERSION }}" \
            --draft \
            $PRERELEASE \
            ./**/*{.AppImage,.deb,.exe,.rpm,.tar.gz}
